#! /bin/sh
# Test the install script
# Note that this differs from the other test scripts: 
# It runs the installer, rather than the scripts in $BINDIR
# As a result, the run_tests_in_docker script has special handling for this script.

. $TESTDIR/lib_test_functions

ERR=$TESTDIR/tmp/$(basename $0).err
OUT=$TESTDIR/tmp/$(basename $0).out

if [ $(uname) = Darwin ]; then
  if [ ! -x $(command -v curl) ]; then
    echo "curl not available, even though it's part of the standard macOS install"
    echo "Aborting"
    exit 1
  fi

  # Remove any existing binaries
  for f in $(ls $BINDIR); do
    f=/usr/local/bin/$f
    [ -f "$f" ] && rm -f $f
  done
else
  # Sigh. Install curl
  . $TESTDIR/lib_linux
  run_apt_get_update_on_debian
  apk add curl > /dev/null 2>&1 || apt-get install --yes curl > /dev/null 2>&1 || brew install curl > /dev/null 2>&1
  if [ ! -x $(command -v curl) ]; then
    echo "Test setup failed: unable to install curl"
    echo "Aborting"
    exit 1
  fi
fi

# Simple happy path test: run the installer, and check that the binaries are available
$ROOTDIR/install.sh -v > $OUT 2> $ERR
EXIT_CODE=$?

copy_file_to_log $OUT stdout
copy_file_to_log $ERR stderr

check_exit_code $EXIT_CODE 0

for command in opm opm_help opm_install opm_list opm_uninstall; do
  if ! $command --help > /dev/null 2>&1; then
    echo "$command --help failed" >> $LOGFILE
    exit 1
  fi
done

