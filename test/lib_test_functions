# lib_test_functions
# Incorporate into test scripts with  . $TESTDIR/lib_test_functions
# vim: ft=sh

# exit code for the test script
EXIT_TEST_PASSED=0
EXIT_TEST_FAILED=1
EXIT_TEST_SKIPPED=2

# utility functions

check_exit_code() {
  ACTUAL=$1
  EXPECTED=$2
  if [ "$EXPECTED" -ne "$ACTUAL" ]; then
    echo Expected exit code $EXPECTED, got $ACTUAL >> $LOGFILE
    exit $EXIT_TEST_FAILED
  fi
  return 0
}


check_file_is_empty() {
  FILENAME=$1  # the file that should be empty
  TEXT_SOURCE=$2  # a human-readable description of where the file content came from (e.g. "stdout" or "stderr")
  if [ -n "$(cat $FILENAME)" ]; then
    echo "Got unexpected output on $TEXT_SOURCE" >> $LOGFILE
    copy_file_to_log "$FILENAME" "$TEXT_SOURCE"
    exit $EXIT_TEST_FAILED
  fi
}


check_file_is_not_empty() {
  FILENAME=$1  # the file that should contain something
  TEXT_SOURCE=$2  # a human-readable description of where the file content came from (e.g. "stdout" or "stderr")
  if [ -z "$(cat $FILENAME)" ]; then
    echo "Expected output on $TEXT_SOURCE but got nothing" >> $LOGFILE
    exit $EXIT_TEST_FAILED
  fi
}


check_files_are_equal() {
  F1=$1
  F2=$2
  equal=true
  if [ -x "$(command -v cmp)" ]; then
    if cmp -s $F1 $F2; then
      equal=true
    else
      equal=false
    fi
  elif [ -x $(command -v sha256sum) ]; then
    # a hash is good enough for our purposes
    H1=$(sha256sum $F1 | cut -d ' ' -f 1)
    H2=$(sha256sum $F2 | cut -d ' ' -f 1)
    if [ "$H1" = "$H2" ]; then
      equal=true
    else
      equal=false
    fi
  else
    echo Unable to compare files: neither cmp nor sha256sum available
    exit $EXIT_TEST_FAILED
  fi

  if ! $equal; then
    echo "Files $F1 and F2 differ" >> $LOGFILE
    copy_file_to_log $F1 "file 1"
    copy_file_to_log $F2 "file 2"
    exit $EXIT_TEST_FAILED
  fi
}


copy_file_to_log() {
  FILENAME=$1  # the file to copy
  TEXT_SOURCE=$2  # a human-readable description of where the file content came from (e.g. "stdout" or "stderr")
  echo "--- begin $TEXT_SOURCE ---" >> $LOGFILE
  cat "$FILENAME" >> $LOGFILE
  echo "--- end $TEXT_SOURCE ---" >> $LOGFILE
}


copy_stdout_stderr_to_log() {
  copy_file_to_log $1 stdout
  copy_file_to_log $2 stderr
}


run_happy_case_command_variant() {
  # assumes that ERR and OUT vars are defined
  suffix=$1
  shift
  echo Running "$@" >> $LOGFILE
  "$@" > ${OUT}.$suffix 2> ${ERR}.$suffix
  EXIT_CODE=$?
  check_file_is_empty ${ERR}.$suffix stderr
  check_exit_code $EXIT_CODE 0
}
